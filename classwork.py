# -*- coding: utf-8 -*-
"""Classwork.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1USfgfNjh7YoDPiH3XOGwksCkEeOyAdDt
"""

# Python Data Types
# 1)Numbers 2)String 3)List 4)TUple 5)Dictionary

# Numbers
a=25
print("a as int:",a)
b=548468
print("b as long",b)
c=14.25
print("c as float",c)
d=3.14j
print("d as complex",d)

#string
str1 = "Welcome to Python"
print(str1)

#List
# Represents with sqaure bracket []
# Array is static and list is dynamic
# Can have dissimilar data types
l1=[15,25.6,"Python"]
print(l1)

#tuple
#Represented by ()
#Set of values separated by commas
#list [] and tuple()
#List allows updates in size and elements where as tuple does not allow
#tuple is read only entity
t1=(21,"Python",21.45)
print(t1)

#Dictonary
#Array,Tuple,List we have to remember the index numbers of an element
#Dictionary creates its own index numbers for our elements
d1={"Aradhana":21,"Prarthana":22,"Rugved":23}
print(d1)





8#Decision Making Statement
#1)if statement 2)if-else Statement 3)Nested if statement
# if statement
n1 = int(input())
n2 = int(input())
n3 = int(input())
if n1>n2 and n1>n3:
  print(n1,"is largest")
if n2>n1 and n2>n3:
  print(n2, "is largest")
if n3>n1 and n3>n2:
  print(n3, "is largest")



#if-else statement
print("Enter a Number")
num = int(input())
if num%2==0:
  print(num," is even")
else:
  print(num, "is odd)

#Nested if statement
n1=int(input())
n2=int(input())
n3=int(input())

if n1>n2:
  if n1>n3:
    print(n1,"is largest")
if n2>n3:
  if n2>n1:
    print(n2,"is largest")
if n3>n2:
  if n3>n1:
   print(n3,"is largest")
print("main area ends")

#Short hand if-else
print("Enter any number")
num=int(input())
print(num,"is even") if num%2==0 else print(num,"is odd")

#elif
weather = input("What is the Wheather today?") #input
if weather == "Sunny" :
  print("It is a great day to go for a picnic! ")
elif weather == "Cloudy":
  print("Don't forgert to bring jacket in case it rains.")
elif weather=="Rainy":
  print("Remember to bring umbrella")
else:
  print("Sorry! I don't understand the weather condition")

#loop manipulation
i=1
while i<10:
  print("Welcome")
  i=i+1

print("Enter a value")
num =int(input())
sum=0
i=1
while i<=num:
  sum=sum+i
  i=i+1
  print("sum",sum)

#for loop
l1=["C++","java","Python"]
for i in l1:
  print("loop refers to book",i)

#Function: Block of instructions that can perform an action and once defined it can be reused.
#Function is defined by using keyword def
#def followed by name of your choosing
#followed by ()
#followed by:

# some user defoned functions
#1)
def sayHello():
  print("Welcome to Python")
sayHello()

#2)
def even():
  print("Enter a number:")
  num = int(input())
  if num%2==0:
    print("Number is even:",num)
  else:
    print("Number is odd:",num)
even()

#4)
def Loopoffruits():
  fruits = ["Apple","Banana","Cherry"]
  for i in fruits:
    print(i,"it is an fruit name")
Loopoffruits()

#Datatypes and object related functions
#type() return the type of parameter
a=10
b=True
c=16.55
d=[10,20,30]
print(type(a))
print(type(b))
print(type(c))
print(type(d))
print(abs(15))

def Bill():
  p1 = int(input()) #p:product
  p2 = int(input())
  p3 = int(input())
  p4 = int(input())
  sum = p1+p2+p3+p4
  print("The Total price of all products = ",sum)
Bill()

def Marksheet():
  print("Enter marks (0-300)")
  physics = int(input())
  chemistry = int(input())
  math = int(input())
  Total_Marks = physics + chemistry + math
  if (Total_Marks>=30 and Total_Marks<=300 ):
    print("Pass")
  else:
    print("fail")

# basic list operations append(), insert(), extend() functions
# append() : appends and adds the specified element to list adds the spe
l1 = [10,20,"Python",94.2,314]
l1.append(21)
print(l1)

l1 =["Python", "Java", "Essentials of data science"]
print(l1)
l1.insert(2,"Hadoop")
print(l1)

#extend() This function adds the elements of parameter list with invoking list
# list1.extends (list2)
l1=[10, 20, 30]
l2=[15,35,45,55]
l1.extend(l2)
print (l1)

l1= [485,21.344, "Python", 25678]
a = l1.__len__()      #Function returns the length of list
print(a)

#Statistics, in general, is the method of collection of data, tabulation, and interpretation
import statistics
l1= [1,2,3,3,2,2,2,1]
print(statistics.mean(l1))

#It is the middle value of the data set. It splits the data into two halves.
import statistics
t1= (21,23,45,67)
print(statistics.median(t1))

#The median_low() function returns the median of data in case of odd number of elements,
#but in case of even number of elements, returns the lower of two middle elements.
#The statistics.median_low() method calculates the low median of the given data set.
#This method also sorts the data in ascending order before calculating the low median.
import statistics
set1 = [1, 2, 8, 4, 5]
#1,1,2,4,5,8
print("Low Median of the set is", (statistics.median_low (set1)))

#median_high()
#function returns the median of data in case of odd number of elements,
#but in case of even number of elements, returns the higher of two middle elements.
#median_high() method calculates the high median of the given data set.
#This method also sorts the data in ascending order before calculating the high median.
import statistics
set1= [1, 3, 3, 4, 5]
#1,3,3,4,5
print("Median of the set is", (statistics.median_high(set1)))

#Mode
#It is the value that has the highest frequency in the given data set.
#The data set may have no mode if the frequency of all data points is the same.
from statistics import mode
t1 = (6, 6, 6,6,3, 3,3,3,3,3,3,3,3,3,3,3,3,4, 5, 5, 5, 5,7)
print("Mode of data set is ", (mode (t1)))

#The difference between the largest and smallest data point in our data set is known as th
#Range = Largest data value - smallest data value
arr = [1, 2, 3, 4, 5]
Maximum = max(arr)
Minimum= min (arr)
Range = Maximum-Minimum
print("Maximum ={}, Minimum = {} and Range = {}".format (Maximum, Minimum, Range))

#It is defined as an average squared deviation from the mean.
from statistics import variance
t1=(1, 2, 5, 4, 8, 9, 12)
print("Variance of Samplel is s", (variance(t1)))

#standard deviation
#It is defined as the square root of the variance.
#It is calculated by finding the Mean, then subtracting each number from the Mean which is
from statistics import stdev
s1=(1, 2, 5, 4, 8, 9, 12)
print("The Standard Deviation of Samplel is s", (stdev(s1)))

import pandas as pd
df = pf.read_excel('/ADITYA EDS Excel Employee (116) 2.0.xlsx')
#df.set_index("date",inplace=True)

from google.colab import drive
drive.mount('/content/drive')

#tuple opratition

t1=(10,20,30,"python",15.71)#declaring tuple
t2=(80,87,21,"durwa")
print(t1)
print(t2)

#accesing tuple elements using indexing
print(t1[0])

#navigate tuple index
print(t1[-1])
print(t2[-2])

#iterating through tuple
for i in t1:
  print(i)

#slicing tuple
st1=t1[1:4]
print(st1)

#tuples are immutable
str2 = t1 + (50,60)
print(str2)

#finding length of tuple
str3 = t1.__len__()
print(str3)

#memborship opreters
print(10 in t1)
print(10 not in t1)

#concatinate tuple
t3=t1+t2
print(t3)

#multiplying tuple
t4 = t1*3
print(t4)

#deleting tuple
del t1



#List
l1=["open the gate of hostel"]
l2=["walk to the college"]
print(l1)
print(l2)

#tuple
t1=("drink juice of mango ","walk to the college")
print(t1)

#Dictonary
d1={"open the gate of hostel":1,"walk to the college":2,"drink juice of mango ":3}
print(d1)

#Nested if statement
n1=int(input())
n2=int(input())
n3=int(input())

import numpy as np
arr=np.array([10,20,30,40,50])
x=arr.copy()
y=arr.view()
arr[1]=60
arr[3]=70
print(arr)
print(x)
print(y)

import numpy as np
x=np.array([[10,20,30,40,50],[10,20,30,40,50]])
y=np.array([[1,2,3,4,5],[10,20,30,40,50]])
print("addition of matrix")
print(np.add(x,y))
print("subtraction of matrix")
print(np.subtract(x,y))

l1=np.matrix('1,2,3,4;6,7,8,9;8,9,6,5')
a=np.array(l1)
print(a)

import json
emp_dict={ "x"=6,"y"=76  }

print(emp_dict)

def subt():
  a=10
  b=20
  f=a-b
  print(f)

  def add():
    a=50
    b=40
    g=a+b
    print(g)
  add()
subt()

def get_cube(num):
  return num*num*num
print(get_cube(5))

#modul is a file contaning a set of function you want to inclde in your application
#import math libary
import math

#return the value of 9 raised to the power of 3
print(maths.pow(9,3))

import pandas as pd
import numpy as np
df=pd.read_excel('/content/ADITYA EDS Excel Employee (116) 2.0.xlsx')
df1=pd.read_excel('/content/ADITYA EDS Excel Employee (116) 2.0.xlsx')
array=df.to_numpy()
array1=df.to_numpy()
print(array)
print(array1)

matrix_length=len(array)
print(matrix_length)

for i in range(matrix_length):
  print(array[i][-1])

for i in range(matrix_length):
  print(array[i])

print(array.T)

c=np.stack((array,array1),axis=0)
print(c)

array = array[:,array[0,:].argsort()]
print(array)

array1=array1[array1[:,1].argsort(kind='mergesort')]
print(array1)

array3=array1.view()
print(array3)

array2=array1.copy()
print(array2)

array3=array1.copy()
print(array3)

budget = 500
item_cost = 166

vegetables_cost = int(input("Enter the cost of vegetables: "))
grocery_cost = int(input("Enter the cost of grocery: "))

if vegetables_cost + grocery_cost > budget:
    print("Aradhana cannot buy daily needs.")
else:
    if vegetables_cost == item_cost and grocery_cost == item_cost:
        print("Aradhana can buy all the items.")
    else:
        print("Aradhana cannot buy daily needs.")

budget = 500
price_per_item = 166

if price_per_item > budget:
    print("Aaradhana cannot buy any items.")
elif price_per_item * 3 <= budget:
    print("Aaradhana can buy vegetables, groceries, and daily needs.")
else:
    print("Aaradhana cannot buy all three items.")

def can_purchase(budget, price_per_item):
    if price_per_item > budget:
        return False
    elif price_per_item * 3 <= budget:
        return True
    else:
        return False

budget = 500
price_per_item = 166

if can_purchase(budget, price_per_item):
    print("Aaradhana can buy vegetables, groceries, and daily needs.")
else:
    print("Aaradhana cannot buy all three items.")

budget = 500
item_cost = 166

vegetables_cost = int(input("Enter the cost of vegetables: "))
grocery_cost = int(input("Enter the cost of grocery: "))

total_cost = vegetables_cost + grocery_cost

if total_cost > budget:
    print("Aradhana cannot buy daily needs.")
elif vegetables_cost == item_cost and grocery_cost == item_cost:
    print("Aradhana can buy all the items.")
else:
    print("Aradhana cannot buy daily needs.")
1

budget = 500
item_cost = 166

vegetable_cost = float(input("Enter the cost of vegetables: "))

if vegetable_cost > budget:
    print("Aaradhana cannot buy vegetables, groceries, and daily needs.")
elif vegetable_cost == item_cost:
    print("Aaradhana can buy vegetables, groceries, and daily needs.")
else:
    print("Aaradhana cannot buy vegetables, groceries, and daily needs.")

budget = 500
vegetable_price = float(input("Enter the price of vegetables: "))
grocery_price = float(input("Enter the price of groceries: "))
daily_needs_price = float(input("Enter the price of daily needs: "))

total_price = vegetable_price + grocery_price + daily_needs_price

if total_price > budget:
    print("Sorry, you cannot buy all three items.")
elif vegetable_price == budget:
  print("Sorry, you cannot")

elif total_price == 166:
    print("You can buy all three items.")
else:
    print("You can buy all three items, but the total price is different from ₹166.")

budget = 500
vegetable_price = float(input("Enter the price of vegetables: "))
grocery_price = float(input("Enter the price of groceries: "))
daily_needs_price = float(input("Enter the price of daily needs: "))

total_price = vegetable_price + grocery_price + daily_needs_price

if total_price > budget:
    print("Sorry, you cannot buy all three items.")
elif total_price == 166:
    print("You can buy all three items.")
else:
    print("You can buy all three items, but the total price is different from ₹166.")

budget = 500
vegetable_price = int(input("Enter the price of vegetables: "))
grocery_price = int(input("Enter the price of groceries: "))
daily_needs_price = int(input("Enter the price of daily needs: "))

total_price = vegetable_price + grocery_price + daily_needs_price

if total_price > budget:
    print("Sorry, you cannot buy all three items.")
elif total_price == 166:
    print("You can buy all three items.")
else:
    print("You can buy all three items, but the total price is different from ₹166.")

#Dumb all the data is dictionary
import csv

def read_csv_file(file_path):
    with open(file_path, 'r') as csv_file:
        reader = csv.reader(csv_file)
        for row in reader:
            print(row)

# Example usage
csv_file_path = '/119_Atharva Data.csv'
read_csv_file(csv_file_path)

#display All the docter name of age greater than or equal to 36
import pandas as pd

# Read the CSV file
data = pd.read_csv('/119_Atharva Data.csv')

# Filter the data based on age condition
filtered_data = data[data['Age'] >= 36]

# Display the doctor names
doctors_names = filtered_data['Dr.Name']
for name in doctors_names:
    print(name)



#fench all the detials
import csv

def fetch_details_from_csv(file_path):
    details = []

    with open(file_path, 'r') as csv_file:
        reader = csv.DictReader(csv_file)

        for row in reader:
            details.append(row)

    return details

# Provide the file path of the CSV file
csv_file_path = '/119_Atharva Data.csv'

# Call the function to fetch details from the CSV file
fetched_details = fetch_details_from_csv(csv_file_path)

# Print the fetched details
for detail in fetched_details:
    print(detail)

#fench all the male data
import pandas as pd

def fetch_male_data(file_path):
    # Read the CSV file
    data = pd.read_csv(file_path)

    # Filter the male data
    male_data = data[data['Gender'] == 'Male']

    return male_data

# Example usage
csv_file_path = '/119_Atharva Data.csv'  # Replace with the actual path to your CSV file
male_records = fetch_male_data(csv_file_path)

# Display the male data
print(male_records)

#fench all the female data
import pandas as pd

def fetch_Female_data(file_path):
    # Read the CSV file
    data = pd.read_csv(file_path)

    # Filter the Female data
    Female_data = data[data['Gender'] == 'Female']

    return Female_data

# Example usage
csv_file_path = '/119_Atharva Data.csv'  # Replace with the actual path to your CSV file
Female_records = fetch_Female_data(csv_file_path)

# Display the Female data
print(Female_records)

df1 = pd read excel('/content/ghendu bam.xlsx')
data =df1.values.tolist ()

a=df1['Product ID']
b=df1['Product Quantity']
df1.Rollno = df1.Rollno.astype('int64')
d = df1['Product Quantity'][df1.Rollno.>24]

def Product Price(a,b,d):
  print(a,b)

  Product Price(a,b)
  def  Product Price(d):

    print('Rating',d)

Product Price

import pandas as pd

df1 = pd.read_excel('/content/ghendu bam.xlsx')
data = df1.values.tolist()

a = df1['Product ID']
b = df1['Product Quantity']
df1.Product ID = df1.Product ID.astype('int64')
d = df1['Product Quantity'][df1.Product ID > 24]

def product_price(a, b):
  print(a, b)

product_price(a, b)

def product_rating(d):
  print('Rating', d)

product_rating(d)

import pandas as pd

df1 = pd.read_excel('/content/ghendu bam.xlsx')

a = df1['Product ID']
b = df1['Product Quantity']
df1['Product ID'] = df1['Product ID'].astype('int64')
d = df1['Product Quantity'][df1['Product ID'] > 24]

def product_price(a, b):
    print(a, b)

product_price(a, b)

def product_rating(d):
    print('Rating', d)

product_rating(d)



import pandas as pd
df1 = pd.read_excel('/content/Exel today (2).xlsx')



#groupby in python

a = df1.groupby('ProductID')['Rating'].count() ==2
b = df1.groupby( 'ProductID')['Rating'].head()

print(a)
print(b)

#aggrigate in python

#Dataframe.aggregate() function is used to apply some aggregation Across one or #sum: Return the sum of the values for the requested axis

#min: Return the minimum of the values for the requested axis #max: Return the maximum of the values for the requested axis

# c=df1.aggregate(['sum', 'min', 'max']) print(c)

# completed



import openpyxl

# Load Excel file
wb = openpyxl.load_workbook('/content/Exel today.xlsx')

# Select the worksheet
ws = wb.active

# Groupby in Python
grouped_counts = {}
grouped_values = {}

# Iterate over rows and perform grouping
for row in ws.iter_rows(min_row=2, values_only=True):
    product_id = row[1]
    rating = row[2]

    if product_id not in grouped_counts:
        grouped_counts[product_id] = 1
        grouped_values[product_id] = rating
    else:
        grouped_counts[product_id] += 1

# Check if counts equal to 2
a = {product_id: count == 2 for product_id, count in grouped_counts.items()}

# Get the first occurrence of each group
b = {product_id: rating for product_id, rating in grouped_values.items()}

print(a)
print(b)

# Aggregate in Python
sum_value = 0
min_value = float('inf')
max_value = float('-inf')

# Iterate over values and perform aggregation
for rating in grouped_values.values():
    sum_value += rating
    min_value = min(min_value, rating)
    max_value = max(max_value, rating)

c = {'sum': sum_value, 'min': min_value, 'max': max_value}
print(c)

import pandas as pd

# Groupby in Python
df1 = pd.DataFrame({'Name': ['John', 'Alice', 'John', 'Bob', 'Alice'],
                    'Rollno': [101, 102, 103, 104, 105]})

# Group by 'Name' and count occurrences of 'Rollno'
a = df1.groupby('Name')['Rollno'].count() == 2
print(a)

# Group by 'Name' and get the first occurrence of 'Rollno'
b = df1.groupby('Name')['Rollno'].head(1)
print(b)

# Aggregate in Python
# Dataframe.aggregate() function is used to apply some aggregation across one or more columns.
# sum: Return the sum of the values for the requested axis
# min: Return the minimum of the values for the requested axis
# max: Return the maximum of the values for the requested axis
c = df1.aggregate(['sum', 'min', 'max'])
print(c)

import pandas as pd
import matplotlib.pyplot as plt

def process_data(file_path):
    df1 = pd.read_excel('/content/Exel today (2).xlsx')

    a = df1.groupby('ProductID')['Rating'].count() == 2
    b = df1.groupby('ProductID')['Rating'].head()

    count_per_name = df1['ProductID'].value_counts()

    plt.figure(figsize=(8, 5))
    plt.bar(count_per_name.index, count_per_name.values)
    plt.xlabel('ProductID')
    plt.ylabel('Count')
    plt.title('Count of Ratings per ProductID')
    plt.xticks(rotation=45)
    plt.show()


file_path = '/content/Exel today (2).xlsx'

process_data(file_path)

import matplotlin.pyplot as plt
import numpy as np

xpoints = np.array([0,6])
ypoints = np.array([0,250])

#split.plot(xpoints, ypoints)
plt.plot(xpoints, ypoints,'-.')
plt.fill_between(xpoints,ypoints,color='red',alpha=0.10)
plt.show()

import matplotlib.pyplot as plt
import numpy as np

xpoints= np.array([0, 6])
ypoints= np.array([0, 250])

#Splt.plot(xpoints, ypoints)
plt.plot(xpoints, ypoints, '-.')
plt.fill_between(xpoints,ypoints, color='blue', alpha = 0.10)
plt.show()

import pandas as pd
import matplotlib.pyplot as plt

def plot_graph(x, y, parameter_value):
    # Plot the graph
    plt.plot(x, y, label='Parameter: {}'.format(parameter_value))

    # Set plot attributes
    plt.title('Graph with Different Parameters')
    plt.xlabel('X-axis')
    plt.ylabel('Y-axis')
    plt.legend()

    # Display the graph
    plt.show()

# Read data from a CSV file
data = pd.read_csv('/content/Sample-Spreadsheet-100-rows11111111111111111111111.csv')

# Specify column names
parameter_column = 'parameter_column'
x_column = 'x_column'
y_column = 'y_column'

# Get unique parameter values from the data
parameter_values = data[parameter_column].unique()

# Iterate over the parameter values
for parameter_value in parameter_values:
    # Filter the data based on the current parameter value
    filtered_data = data[data[parameter_column] == parameter_value]

    # Extract x and y values from the filtered data
    x = filtered_data[x_column]
    y = filtered_data[y_column]

    # Call the plot_graph function
    plot_graph(x, y, parameter_value)

import matplotlib.pyplot as plt
import numpy as np

xpoints = np.array([0,5])
ypoints = np.array([0,200])

plt.plot(xpoints, ypoints)
plt.fill_between(xpoints, ypoints, color='red', alpha = 0.5)
plt.show()





import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
csv_file_path = "/content/STUDENT_DATASET.csv"

data_frame = pd.read_csv(csv_file_path)
array_data = np.array(data_frame)

x = np.array(data_frame["age"])
y = np.array(data_frame["name"])

print(array_data)

print(x)
print(y)

plt.plot(x, y, marker="o")
plt.xlabel("age")
plt.ylabel("name")
plt.title("Graph of Column1 vs Column2")

plt.show()

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
csv_file_path = "/content/STUDENT_DATASET.csv"

data_frame = pd.read_csv(csv_file_path)
array_data = np.array(data_frame)

x = np.array(data_frame["age"])
y = np.array(data_frame["gender"])

print(array_data)

print(x)
print(y)

plt.plot(x, y, marker="o")
plt.xlabel("age")
plt.ylabel("gender")
plt.title("Graph of Column1 vs Column2")

plt.show()

import matplotlib.pyplot as plt
import numpy as np

xpoints = np.array([0,10])
ypoints = np.array([0,350])

plt.plot(xpoints, ypoints)
plt.fill_between(xpoints, ypoints, color='green', alpha = 0.5)
plt.show()

aaathatv gharate is my name and i am greathankyou is ,y m

import pandas as pd
import matplotlib.pyplot as plt

def plot_single_graph(data, x_column, y_column):
    x = data[x_column]
    y = data[y_column]

    # Plot the graph
    plt.plot(x, y)
    plt.title('Graph')
    plt.xlabel(x_column)
    plt.ylabel(y_column)
    plt.show()

# Read data from a CSV file
data = pd.read_csv('/content/STUDENT_DATASET.csv')  # Replace 'data.csv' with your CSV file path

# Define column names
x_column = 'age'
y_column = 'gender'

# Call the function to plot a single graph
plot_single_graph(data, x_column, y_column)

import csv
import matplotlib.pyplot as plt
with open('/content/testmarks1.csv', 'r') as csvfile:
    reader = csv.reader(csvfile)
    data = list(reader)
def fun(i,j):
  for row in data:
    print(row)
i = 0
while i < len(data):
    print(data[i])
    i += 1
groups = []
for i in range(10):
    group = []
    for j in range(len(data)):
        if i == j%5:
            group.append(data[j])
    groups.append(group)
for group in groups:
    print(group)
for i in range(10):
    plt.plot([x[0] for x in groups[i]], [x[1] for x in groups[i]])
    plt.title("Group {i}")
    plt.show()
fun(i,j)

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
#isna indicate missing values
# Dropna drop missing values
#read data set

df1 = pd.read_csv('/content/test.csv')
a = df1.head()

#data Preprocessing

x = df1.iloc[:,:-1]
y = df1.iloc[:,1]

#splitting dataset

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x,y,test_size = 1/3, random_state=0)
from sklearn.linear_model import LinearRegression
regressor = LinearRegression()
regressor.fit(x_train, y_train)
y_pred = regressor.predict(x_test)
y_pred
y_test
plt.scatter (x_train, y_train, color='red') #plotting the observation line
plt.plot(x_train, regressor.predict(x_train), color="blue") # plotting the regression line
plt.title("X vs Y") # stating the title of the graph plt.xlabel("Years of experience") # adding the name of x-axis
plt.ylabel("Y") # adding the name of y-axis
plt.show() # specifies end of graph